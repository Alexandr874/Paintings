
const mask = (selector) => {

    let setCursorPosition = (pos, elem) => {
        elem.focus();

        if (elem.setSelectionRange) {
            elem.setSelectionRange(pos, pos);
        } else  if(elem.createTextRange) {
            let range = elem.createTextRange();

            range.collapse(true);
            range.moveEnd('character', pos);
            range.moveStart('character', pos);
            range.select();
        }
    };
    /* Внутри функции, первым делом вызывается метод focus() на элементе elem, чтобы 
    установить на него фокус. Затем проверяется, поддерживает ли браузер метод 
    setSelectionRange(), который позволяет установить позицию курсора в поле ввода. Если 
    метод поддерживается, то вызывается метод setSelectionRange() и передается ему позиция 
    pos для установки курсора.

    Если метод setSelectionRange() не поддерживается (например, в старых версиях IE), то 
    создается объект range с помощью метода createTextRange() на элементе elem. Затем 
    вызываются методы collapse(), moveEnd(), moveStart() и select(), чтобы установить 
    позицию курсора в поле ввода.

    Таким образом, функция setCursorPosition() позволяет программно установить позицию 
    курсора в текстовом поле или другом элементе управления формой, что может быть полезным, 
    например, при валидации форм или при автоматическом заполнении полей ввода. */
    
    /* Метод createTextRange() создает объект TextRange для текущего элемента ввода. Объект 
    TextRange является специальным объектом в Internet Explorer, который используется для 
    работы с выделенным текстом в элементах управления формой, таких как текстовые поля и 
    текстовые зоны.

    Метод collapse() перемещает конечную точку выделения на начало выделения. Если выделение 
    отсутствует, то перемещается курсор на указанную позицию.

    Методы moveEnd() и moveStart() перемещают конечную и начальную точки выделения 
    соответственно на определенное количество символов в заданном направлении от текущего 
    положения конечной или начальной точки. Направление определяется первым параметром 
    метода (character для перемещения по символам или word для перемещения по словам), а 
    количество символов - вторым параметром.

    Например, метод moveEnd('character', 2) перемещает конечную точку выделения на два 
    символа вправо от текущего положения.

    Метод select() выделяет текст в элементе управления формой в соответствии с 
    установленными точками выделения. Если точки выделения не установлены, то метод ничего 
    не делает.

    Таким образом, все эти методы используются для работы с текстовыми полями и другими 
    элементами управления формой в Internet Explorer, чтобы установить позицию курсора, 
    переместить выделение или выделить текст. Они были предназначены для использования в 
    старых версиях IE, в которых не было поддержки стандартных методов работы с текстовыми 
    полями, таких как setSelectionRange(). В современных браузерах, в том числе и IE, 
    рекомендуется использовать стандартные методы для работы с текстовыми полями. */



    function createMask(event) {
        // устанавливаем матрицу по которой будет вводиться телефон
        let matrix = '+7 (___) ___ __ __',
            i = 0,
            def = matrix.replace(/\D/g, ''),
            val = this.value.replace(/\D/g, '');

            if (def.length >= val.length) {
                val = def;
            }

            this.value = matrix.replace(/./g, function(a) {
                return /[_\d]/.test(a) && i < val.length ? val.charAt(i++) : i >= val.length ? '': a;
            });

            /* this.value - устанавливает значение свойства value текущего объекта 
            (контекста), которое должно быть равно измененной строке.
matrix - это исходная строка, которую мы заменяем. 
replace(/./g, function(a) { ... }) - метод replace используется для замены всех символов в 
строке. Регулярное выражение /./g соответствует любому символу в строке, а флаг g означает, 
что мы хотим выполнить замену для всех совпадений. Вторым аргументом метода replace является 
функция обратного вызова, которая будет выполняться для каждого найденного совпадения. 
function(a) { ... } - это функция обратного вызова, которая будет вызываться для каждого 
найденного совпадения в строке. В этой функции мы определяем логику замены символов.
/[_\d]/.test(a) - это регулярное выражение, которое проверяет, соответствует ли текущий 
символ a символу подчеркивания или цифре. Функция test возвращает true, если текущий символ 
соответствует регулярному выражению, и false в противном случае.
i < val.length ? val.charAt(i++) : i >= val.length ? '': a - это тернарный оператор, который 
определяет, какой символ использовать вместо текущего символа a.
Если i меньше длины строки val, то мы берем следующий символ из строки val с помощью метода 
charAt и увеличиваем значение i на 1.
Если i больше или равно длине строки val, то мы возвращаем пустую строку, чтобы удалить 
оставшиеся символы в строке matrix.
В противном случае мы возвращаем текущий символ a.
i - это переменная, которая используется для отслеживания позиции текущего символа в строке 
val.
val - это строка, которую мы используем для замены символов в строке matrix. */

            if (event.type === 'blur') {
                if (this.value.length == 2) {
                    this.value = '';
                }
            } else {
                setCursorPosition(this.value.length, this);
            }

    }

    let inputs = document.querySelectorAll(selector);


    inputs.forEach(input => {
        input.addEventListener('input', createMask);
        input.addEventListener('focus', createMask);
        input.addEventListener('blur', createMask);
    });

    /* Первый блок кода проверяет, было ли событие "blur" (когда элемент теряет фокус), и 
    если да, то проверяет длину значения в элементе. Если длина равна двум символам, то 
    значение очищается.

    Если событие не является "blur", то вызывается функция setCursorPosition, которая 
    устанавливает позицию курсора в конец строки ввода.

    Второй блок кода находит все элементы на странице, которые соответствуют указанному 
    селектору и для каждого из них добавляет обработчики событий "input", "focus" и "blur", 
    которые вызывают функцию createMask. Функция createMask скорее всего отвечает за 
    применение маски к текстовому полю ввода. */

};
export default mask;